# frozen_string_literal: true

require "spec_helper"

RSpec.describe Milight::V6::Command do
  let(:socket) { double(Milight::V6::Socket, host: "127.0.0.1", port: 5987) }

  before do
    allow(Milight::V6::Socket).to receive(:new).and_return(socket)
    allow(socket).to receive(:send_bytes)
    allow(socket).to receive(:receive_bytes).and_return(
      [
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00]
      ], "127.0.0.1"
    )
  end

  subject { Milight::V6::Command.new(socket) }

  describe "session" do
    it "sends the bridge session command" do
      expect(socket).to receive(:send_bytes).with(
        [0x20, 0x00, 0x00, 0x00, 0x16, 0x02, 0x62, 0x3A, 0xD5, 0xED, 0xA3, 0x01, 0xAE, 0x08,
         0x2D, 0x46, 0x61, 0x41, 0xA7, 0xF6, 0xDC, 0xAF, 0xD3, 0xE6, 0x00, 0x00, 0x1E]
      )
      subject.execute(1, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    end

    it "raises an exception when the session could not be established" do
      allow(socket).to receive(:receive_bytes).and_return(nil)

      expect { subject.execute(1, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) }.to raise_error Milight::V6::Exception
    end
  end

  describe "#execute" do
    it "raises an exception when zone_id is too low" do
      expect { subject.execute(-1, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) }.to raise_error ArgumentError
    end

    it "raises an exception when zone_id is too high" do
      expect { subject.execute(5, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) }.to raise_error ArgumentError
    end

    it "sends the command" do
      expect(socket).to receive(:send_bytes).with(
        [0x80, 0x00, 0x00, 0x00, 0x11, 0x10, 0x20, 0x00, 0x01, 0x00,
         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02]
      )
      subject.execute(1, [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    end
  end
end
